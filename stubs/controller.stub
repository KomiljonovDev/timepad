<?php

namespace App\Http\Controllers;

use App\Services\Contracts\{{modelName}}ServiceInterface;
use App\Http\Requests\{{modelName}}\Store{{modelName}}Request;
use App\Http\Requests\{{modelName}}\Update{{modelName}}Request;
use App\Http\Requests\{{modelName}}\List{{modelName}}Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class {{modelName}}Controller extends Controller
{
    protected {{modelName}}ServiceInterface $service;

    public function __construct({{modelName}}ServiceInterface $service)
    {
        $this->service = $service;
    }

    public function index(List{{modelName}}Request $request): JsonResponse
    {
        try {
            $filters = $request->validated()['filters'] ?? [];
            $this->service->setFilters($filters);
            $data = $this->service->get();
            return response()->json(['data' => $data], 200);
        } catch (\Exception $e) {
            return response()->json(['error' => 'Failed to retrieve {{modelLower}}s'], 500);
        }
    }

    public function store(Store{{modelName}}Request $request): JsonResponse
    {
        try {
            $data = $this->service->create($request->validated());
            return response()->json(['data' => $data, 'message' => '{{modelName}} created successfully'], 201);
        } catch (\Exception $e) {
            return response()->json(['error' => 'Failed to create {{modelLower}}'], 500);
        }
    }

    public function show($id): JsonResponse
    {
        try {
            $data = $this->service->show($id);
            if (!$data) {
                throw new ModelNotFoundException();
            }
            return response()->json(['data' => $data], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json(['error' => '{{modelName}} not found'], 404);
        } catch (\Exception $e) {
            return response()->json(['error' => 'Failed to retrieve {{modelLower}}'], 500);
        }
    }

    public function update(Update{{modelName}}Request $request, $id): JsonResponse
    {
        try {
            $data = $this->service->edit($request->validated(), $id);
            if (!$data) {
                throw new ModelNotFoundException();
            }
            return response()->json(['data' => $data, 'message' => '{{modelName}} updated successfully'], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json(['error' => '{{modelName}} not found'], 404);
        } catch (\Exception $e) {
            return response()->json(['error' => 'Failed to update {{modelLower}}'], 500);
        }
    }

    public function destroy($id): JsonResponse
    {
        try {
            $result = $this->service->delete($id);
            if (!$result) {
                throw new ModelNotFoundException();
            }
            return response()->json(['message' => '{{modelName}} deleted successfully'], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json(['error' => '{{modelName}} not found'], 404);
        } catch (\Exception $e) {
            return response()->json(['error' => 'Failed to delete {{modelLower}}'], 500);
        }
    }
}